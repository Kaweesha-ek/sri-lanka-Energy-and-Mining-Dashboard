# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ug9vLY8AX1t5psHdZ3wvcD8klwUyQCwz
"""

from google.colab import files
import pandas as pd
import io
import seaborn as sns
import matplotlib.pyplot as plt

# Upload the file
from google.colab import files
uploaded = files.upload()

# Get the actual file name
file_name = next(iter(uploaded))

# Convert the uploaded file into a DataFrame
df = pd.read_csv(io.BytesIO(uploaded[file_name]))

df.head()

# Remove incorrect header row and rename columns
df = df[1:].copy()
df.columns = ["country_name", "country_iso3", "year", "indicator_name", "indicator_code", "value"]

df.info()

print (df.describe)

# Convert data types
df["year"] = pd.to_numeric(df["year"], errors="coerce")
df["value"] = pd.to_numeric(df["value"], errors="coerce")

# Checking missing values
missing_values = df.isnull().sum()
print("Missing values per column:")
print(missing_values)

# Checking duplicates
duplicates = df.duplicated().sum()
print(f"\nNumber of duplicate rows: {duplicates}")

# Checking outliers (using IQR method for each indicator)
def detect_outliers(series):
    q1 = series.quantile(0.25)
    q3 = series.quantile(0.75)
    iqr = q3 - q1
    lower = q1 - 1.5 * iqr
    upper = q3 + 1.5 * iqr
    return ((series < lower) | (series > upper)).sum()

outlier_counts = df.groupby('indicator_name')['value'].apply(detect_outliers)
print("\nOutlier counts per indicator (values > 0 indicate potential outliers):")
print(outlier_counts[outlier_counts > 0])

#  Handle outliers if present
if any(outlier_counts > 0):
    def cap_outliers(group):
        if len(group) > 10:
            q1 = group.quantile(0.25)
            q3 = group.quantile(0.75)
            iqr = q3 - q1
            lower = q1 - 1.5 * iqr
            upper = q3 + 1.5 * iqr
            return group.clip(lower, upper)
        return group

    df['value'] = df.groupby('indicator_name')['value'].transform(cap_outliers)
    print("Handled outliers.")

# Reset index
df.reset_index(drop=True, inplace=True)

# Categorize indicators
categories = {
    'electricity': 'Electricity Access',
    'energy intensity': 'Energy Efficiency',
    'renewable': 'Renewable Energy',
    'mineral|mining|rents': 'Mining',
    'fuel': 'Fuel Trade',
    'ores|metals': 'Metals Trade',
    'time to obtain|time required|electrical outages|value lost': 'Service Quality',
    'investment': 'Investments',
    'natural resources|energy depletion': 'Resource Rents'
}

def assign_category(name):
    name = name.lower()
    for pattern, category in categories.items():
        if any(keyword in name for keyword in pattern.split('|')):
            return category
    return 'Other'

df['indicator_category'] = df['indicator_name'].apply(assign_category)

# Normalize percentage indicators
percent_indicators = [
    'access to electricity',
    'renewable energy consumption',
    'firms using banks',
    'value lost due to electrical outages'
]

for indicator in percent_indicators:
    mask = df['indicator_name'].str.lower().str.contains(indicator)
    df.loc[mask, 'value'] = df.loc[mask, 'value'] / 100

# Normalize investment values to millions
investment_mask = df['indicator_name'].str.contains('investment', case=False)
df.loc[investment_mask, 'value'] = df.loc[investment_mask, 'value'] / 1_000_000

# Save cleaned data
df.to_csv("cleaned_energy_and_mining_lka.csv", index=False)
print("\nPreprocessing complete. Cleaned file saved.")

# Distribution of indicator categories
plt.figure(figsize=(12, 6))
sns.countplot(data=df, y='indicator_category', order=df['indicator_category'].value_counts().index)
plt.title("Indicator Category Distribution")
plt.xlabel("Count")
plt.ylabel("Indicator Category")
plt.tight_layout()
plt.show()

# Missing values heatmap
sns.heatmap(df.isnull(), cbar=False, cmap='viridis')
plt.title("Missing Values Heatmap")
plt.show()

# Trends for top 5 most frequent indicators
top_indicators = df['indicator_name'].value_counts().head(5).index.tolist()

for ind in top_indicators:
    subset = df[df['indicator_name'] == ind]
    sns.lineplot(data=subset, x='year', y='value', hue='country_name')
    plt.title(f"Trend Over Time: {ind}")
    plt.ylabel("Value")
    plt.xlabel("Year")
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.tight_layout()
    plt.show()

# Boxplots for top 4 categories
top_categories = df['indicator_category'].value_counts().tail(4).index.tolist()

for cat in top_categories:
    subset = df[df['indicator_category'] == cat]
    sns.boxplot(data=subset, x='indicator_category', y='value')
    plt.title(f"Value Distribution: {cat}")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()









